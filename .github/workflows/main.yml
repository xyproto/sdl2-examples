name: sdl2-examples

on:
  push:
    branches:
    - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
    - '*'
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  cmake:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tests_list:
        - { folder: "c++11-cmake" }
        - { folder: "c++14-cmake" }
        - { folder: "c++17-cmake" }
        - { folder: "c++20-cmake" }
        - { folder: "c++23-cmake" }
    steps:
      - uses: actions/checkout@v4
      - name: install_dependencies
        run: |
          sudo apt-get install -y libsdl2-dev ninja-build cmake
      - name: build
        run: |
              cd ${{ matrix.tests_list.folder }}
              cmake -S . -B build -G Ninja
              ninja -C build
  make:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tests_list:
        - { folder: "assembly/linux-x86_64" }
        - { folder: "c89" }
        - { folder: "c99" }
        - { folder: "c11" }
        - { folder: "c18" }
        - { folder: "c2x" }
        - { folder: "c++98" }
        - { folder: "c++11" }
        - { folder: "crystal" }
        - { folder: "csharp" }
    steps:
      - uses: actions/checkout@v4
      - name: install_dependencies
        run: |
          sudo apt-get install -y cmake curl gnupg libgmp-dev libsdl2-dev libsdl2-image-dev mono-devel mono-mcs mono-runtime mono-vbnc nasm ninja-build
          curl -fsSL https://crystal-lang.org/install.sh | sudo bash -s -- --channel=stable
      - name: build
        run: |
              cd ${{ matrix.tests_list.folder }}
              make all
  alire:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v4
    -
      name: Set up Alire
      uses: alire-project/setup-alire@v2
      with:
        version: "nightly"
    -
      name: Install toolchain
      run: |
        alr --non-interactive config --global --set toolchain.assistant false
        alr --non-interactive toolchain --install gnat_native
        alr --non-interactive toolchain --install gprbuild
        alr --non-interactive toolchain --select gnat_native
        alr --non-interactive toolchain --select gprbuild
    -
      name: Build
      run: |
        cd ada
        alr --non-interactive build
  alire-macos-13:
    # This job runs with macOS 13 and the latest stable Xcode (v15),
    # which introduced the problem with ld-new (the default
    # implementation of ld) and ld-classic). The main effect seen with
    # this is sometimes-failing exception handling, shouldn't be a
    # problem here.
    runs-on: macos-13
    steps:
    -
      name: Set Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    -
      name: Check ld version
      run: ld -v
    -
      name: Checkout
      uses: actions/checkout@v4
    -
      name: Set up Alire
      uses: alire-project/setup-alire@v2
      with:
        version: "nightly"
    -
      name: Install toolchain
      run: |
        alr --non-interactive config --global --set toolchain.assistant false
        alr --non-interactive toolchain --install gnat_native
        alr --non-interactive toolchain --install gprbuild
        alr --non-interactive toolchain --select gnat_native
        alr --non-interactive toolchain --select gprbuild
    -
      name: Build
      run: |
        cd ada
        alr --non-interactive build
